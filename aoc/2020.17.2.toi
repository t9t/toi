toString|x y z w| str {
    str = string(x) _ "," _ string(y) _ "," _ string(z) _ "," _ string(w)
}

deltas = array()
w = 0-1
while w <= 1 {
    z = 0-1
    while z <= 1 {
        y = 0-1
        while y <= 1 {
            x = 0-1
            while x <= 1 {
                if w <> 0 or z <> 0 or y <> 0 or x <> 0 {
                    push(deltas, toString(x, y, z, w))
                }
                x = x + 1
            }
            y = y + 1
        }
        z = z + 1
    }
    w = w + 1
}

grid = map()

for line = [inputLines()]y {
    for char = [chars(line)]x {
        if char == "#" {
            [grid](toString(x, y, 0, 0)) = 1
        }
    }
}

cycleInto|deltas grid coords newGrid| {
    parts = split(coords, ",")
    x = int([parts]0)
    y = int([parts]1)
    z = int([parts]2)
    w = int([parts]3)

    activeNeighbors = 0
    for delta = [deltas]d {
        parts = split(delta, ",")
        dx = int([parts]0)
        dy = int([parts]1)
        dz = int([parts]2)
        dw = int([parts]3)

        neighborKey = toString(x+dx, y+dy, z+dz, w+dw)
        if isSet(grid, neighborKey) {
            activeNeighbors = activeNeighbors + 1
        }
    }

    active = isSet(grid, coords)
    if active {
        if activeNeighbors == 2 or activeNeighbors == 3 {
            [newGrid]coords = 1
        }
    } otherwise {
        if activeNeighbors == 3 {
            [newGrid]coords = 1
        }
    }

}

i = 1
while i <= 6 {
    newGrid = map()
    for one = [grid]coords {
        parts = split(coords, ",")
        x = int([parts]0)
        y = int([parts]1)
        z = int([parts]2)
        w = int([parts]3)

        cycleInto(deltas, grid, coords, newGrid)

        for delta = [deltas]d {
            parts = split(delta, ",")
            dx = int([parts]0)
            dy = int([parts]1)
            dz = int([parts]2)
            dw = int([parts]3)

            cycleInto(deltas, grid, toString(x+dx, y+dy, z+dz, w+dw), newGrid)
        }
    }
    i = i + 1
    grid = newGrid
}

println(len(grid))
