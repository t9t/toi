deck = array()
state = 0
for line = [inputLines()]l {
    if state == 0 {
        if l <> 0 {
            deck1 = deck
            deck = array()
        }
        state = 1
    } otherwise {
        if line == "" {
            state = 0
        } otherwise {
            push(deck, int(line))
        }
    }
}

deck2 = deck

copy|deck n| out {
    out = array()
    i = 0
    while i < n {
        push(out, [deck]i)
        i = i + 1
    }
}

calculateScore|deck| score {
    worth = 1
    score = 0
    i = len(deck)-1
    while i >= 0 {
        score = score + worth*[deck]i
        i = i - 1
        worth = worth + 1
    }
}

skipFirst|deck| out {
    out = array()
    i = 1
    while i < len(deck) {
        push(out, [deck]i)
        i = i + 1
    }
}

playRecursiveCombat|deck1 deck2 game| gameWinner {
    cache = map()
    while len(deck1) <> 0 and len(deck2) <> 0 {
        score1 = calculateScore(deck1)
        score2 = calculateScore(deck2)
        cacheKey = string(score1) _ "," _ string(score2)
        if isSet(cache, cacheKey) {
            gameWinner = 1
            exit function
        }
        [cache]cacheKey = 1

        card1 = [deck1]0
        deck1 = skipFirst(deck1)
        card2 = [deck2]0
        deck2 = skipFirst(deck2)

        if len(deck1) >= card1 and len(deck2) >= card2 {
            recurseDeck1 = copy(deck1, card1)
            recurseDeck2 = copy(deck2, card2)
            roundWinner = playRecursiveCombat(recurseDeck1, recurseDeck2, game + 1)
        } otherwise {
            if card1 > card2 {
                roundWinner = 1
            } otherwise {
                roundWinner = 2
            }
        }

        if roundWinner == 1 {
            push(deck1, card1)
            push(deck1, card2)
        } otherwise {
            push(deck2, card2)
            push(deck2, card1)
        }
    }

    if len(deck1) == 0 {
        gameWinner = 2
    } otherwise {
        gameWinner = 1
    }

    if game == 1 {
        winning = deck1
        if gameWinner == 2 {
            winning = deck2
        }
        println(calculateScore(winning))
    }
}

playRecursiveCombat(deck1, deck2, 1)
